#!/usr/bin/env python3
import re
from collections import defaultdict


def readProfile(profilePath):
    """
    Parse the error profile generated by NanoSim
    """
    c = defaultdict(lambda: defaultdict(int))
    with open(profilePath, "r") as profile:
        for i, line in enumerate(profile):
            if i == 0:
                continue
            l = line.split()
            c[l[0]][l[2]] += int(l[3])
    return c


def writeBlock(seq, handle, wrap=80):
    """
    Write sequence to output handle in fasta file with line wrap
    """
    line = ""
    for i, c in enumerate(seq):
        line += c
        if (i + 1) % wrap == 0:
            handle.write(line + "\n")
            line = ""
    handle.write(line + "\n")


def getNewName(name, seq, counts):
    """
    Convert read name to paftools mapeval format
    """
    regex = r"(?P<chrm>[^_]+)_(?P<start>\d+)(_|;)aligned_(?P<idx>\d+)+_(?P<strand>R|F)_(?P<pre>\d+)_(?P<aln>\d+)_(?P<suff>\d+)"
    l = len(seq)
    s = re.match(regex, name).groups()
    chrm, start, _, idx, strand, _, _, _ = s
    strand = {"F": "+", "R": "-"}.get(strand)
    shortname = "_".join(s[:2])
    end = int(start) + l + counts[shortname]["del"] - counts[shortname]["ins"]
    newName = f"S_{idx}!{chrm.replace('-','_')}!{start}!{end}!{strand}"

    return newName


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument("--fasta", required=True)
    parser.add_argument("--errorProfile", required=True)
    parser.add_argument("--output", required=True)

    args = parser.parse_args()

    counts = readProfile(args.errorProfile)

    with open(args.fasta, "r") as fasta:
        with open(args.output, "w") as out:
            name, seq = "", ""
            for i, line in enumerate(fasta):
                if line[0] == ">":
                    if i > 0:
                        newName = getNewName(name, seq, counts)
                        out.write(">" + newName + "\n")
                        writeBlock(seq, out)

                        seq = ""
                    name = line.strip()[1:]
                else:
                    seq += line.strip()

            newName = getNewName(name, seq, counts)
            out.write(">" + newName + "\n")
            writeBlock(seq, out)
